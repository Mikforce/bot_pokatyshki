import re
import joblib
import os
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import SGDClassifier
from sklearn.pipeline import Pipeline

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –º–æ–¥–µ–ª–∏
model = None


def prepare_text(text):
    """–û—á–∏—Å—Ç–∫–∞ –∏ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞."""
    text = text.lower()
    text = re.sub(r'[^–∞-—è—ëa-z0-9\s]', ' ', text)  # –£–¥–∞–ª—è–µ–º –≤—Å—é –ø—É–Ω–∫—Ç—É–∞—Ü–∏—é
    text = re.sub(r'\s+', ' ', text).strip()  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    return text


# –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
training_texts = [
    # –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã (–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ–∫–∞—Ç–∞—Ç—å—Å—è)
    "–≥–æ –ø–æ–∫–∞—Ç–∞–µ–º—Å—è –Ω–∞ –º–æ—Ç–æ—Ü–∏–∫–ª–∞—Ö",
    "–µ—Å—Ç—å –∫—Ç–æ —Ö–æ—á–µ—Ç –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–≥ –≤ —Å—É–±–±–æ—Ç—É?",
    "–ø—Ä–µ–¥–ª–∞–≥–∞—é –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –ø–æ–∫–∞—Ç—É—à–∫—É",
    "–ø–æ–µ—Ö–∞–ª–∏ –Ω–∞ —Ç—Ä–µ–∫",
    "–≤—Å—Ç—Ä–µ—á–∞–µ–º—Å—è —É –≥–∞—Ä–∞–∂–∞ –≤ 8, –ø–æ–µ—Ö–∞–ª–∏ –∫–∞—Ç–∞—Ç—å",
    "–∫—Ç–æ —Å–µ–≥–æ–¥–Ω—è —Å–≤–æ–±–æ–¥–µ–Ω –ø–æ–∫–∞—Ç–∞—Ç—å—Å—è?",
    "–ø–æ–≥–æ–¥–∞ –∫–ª–∞—Å—Å–Ω–∞—è, –Ω–∞–¥–æ –±—ã –ø—Ä–æ–∫–∞—Ç–∏—Ç—å—Å—è",
    "–≥–æ –Ω–∞ –º–æ—Ç–æ –ø–æ—Å–ª–µ —Ä–∞–±–æ—Ç—ã",
    "—Å–æ–±–∏—Ä–∞–µ–º—Å—è –Ω–∞ –∫–∞—Ä—Ç–æ–¥—Ä–æ–º –≤ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ",
    "–∫—Ç–æ –∑–∞ –º–æ—Ç–æ–ø—Ä–æ–≥—É–ª–∫—É –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã—Ö?",
    "–ø—Ä–µ–¥–ª–∞–≥–∞—é —Å–æ–±—Ä–∞—Ç—å—Å—è –∏ –ø–æ–∫–∞—Ç–∞—Ç—å",
    "–µ—Å—Ç—å –∂–µ–ª–∞—é—â–∏–µ –ø—Ä–æ–∫–∞—Ç–∏—Ç—å—Å—è –≤–µ—á–µ—Ä–æ–º?",
    "–æ—Ä–≥–∞–Ω–∏–∑—É–µ–º –º–æ—Ç–æ–ø—Ä–æ–±–µ–≥",
    "–≥–æ –Ω–∞ –±–∞–π–∫–∞—Ö –ø–æ –≥–æ—Ä–æ–¥—É",
    "–ø–ª–∞–Ω–∏—Ä—É–µ–º –ø–æ–∫–∞—Ç—É—à–∫—É –Ω–∞ –∑–∞–≤—Ç—Ä–∞",
    "–∫–∞—Ç–∞–µ–º —Å–µ–≥–æ–¥–Ω—è?",
    "–≥–æ—É –∫–∞—Ç–∞—Ç—å",
    "–ø—Ä–µ–¥–ª–∞–≥–∞—é –ø–æ–∫–∞—Ç–∞—Ç—å—Å—è",
    "–∫—Ç–æ –Ω–∞ –º–æ—Ç–æ –ø—Ä–æ–∫–∞—Ç–∏—Ç—å—Å—è?",
    "–≥–æ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–≥–µ –≤ –ø—è—Ç–Ω–∏—Ü—É",
    # –ù–æ–≤—ã–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –∏–∑ –∞–Ω–∞–ª–∏–∑–∞
    "–¥–∞–≤–∞–π—Ç–µ –æ–∫–æ–ª–æ 14.00 —É –º–µ–Ω—è —Å–æ–±–∏—Ä–∞–µ–º—Å—è –¥–∞–ª—å—à–µ —Ä–µ—à–∏–º –ø–æ –º–µ—Å—Ç—É",
    "–≤—Å–µ–º –∫ 14 –±—ã—Ç—å",
    "–∞—Ä—Ç–µ–º —à–∞–º–∏–ª—å–µ–≤–∏—á –ø–æ–¥—Ç—è–Ω–µ—Ç—Å—è",
    "–∫–∞–Ω–∏—Å—Ç—Ä—É –Ω–∞ 20–ª –∑–∞–±—Ä–∞—Ç—å —è –∑–∞–ø–∞—Ä–∏–ª—Å—è —Å 5–ª –≤—Å–µ –º–æ—Ç—ã –∑–∞–ø—Ä–∞–≤–ª—è—Ç—å",

    # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã (–Ω–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
    "—É –º–µ–Ω—è —Å–ª–æ–º–∞–ª—Å—è –º–æ—Ç–æ—Ü–∏–∫–ª",
    "–Ω–µ–Ω–∞–≤–∏–∂—É –∫–∞—Ä—Ç–∏–Ω–≥ —ç—Ç–æ –Ω–µ –¥–ª—è –º–µ–Ω—è",
    "–∫–∞—Ç–∞–ª—Å—è –≤—á–µ—Ä–∞ —É—Å—Ç–∞–ª",
    "–ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —ç—Ç–æ—Ç –≤–∏–¥–æ—Å —Å –º–æ—Ç–æ–∫—Ä–æ—Å—Å–∞",
    "–∫–∞–∫–æ–µ –º–∞—Å–ª–æ –ª–∏—Ç—å –≤ –¥–≤–∏–≥–∞—Ç–µ–ª—å",
    "–≥–¥–µ –∫—É–ø–∏—Ç—å —Ö–æ—Ä–æ—à–∏–π —à–ª–µ–º",
    "–∫–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–¥–≤–µ—Å–∫—É –Ω–∞ –º–æ—Ç–æ—Ü–∏–∫–ª–µ",
    "—É –∫–æ–≥–æ –µ—Å—Ç—å –æ–ø—ã—Ç —Å —Ä–µ–º–æ–Ω—Ç–æ–º –∫–∞—Ä–±—é—Ä–∞—Ç–æ—Ä–∞",
    "–ø–æ—Å–æ–≤–µ—Ç—É–π—Ç–µ —Ö–æ—Ä–æ—à–∏–µ –ø–µ—Ä—á–∞—Ç–∫–∏ –¥–ª—è –º–æ—Ç—Ç–æ",
    "–∫–æ–≥–¥–∞ —Å–ª–µ–¥—É—é—â–µ–µ –º–æ—Ç–æ–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –≤ –≥–æ—Ä–æ–¥–µ",
    "—Å–º–æ—Ç—Ä–µ–ª –≥–æ–Ω–∫–∏ –≤—á–µ—Ä–∞ –ø–æ —Ç–µ–ª–∏–∫—É",
    "–ª—é–±–ª—é —Å–º–æ—Ç—Ä–µ—Ç—å –º–æ—Ç–æ–≥–æ–Ω–∫–∏",
    "–∫–∞–∫–∞—è –ø–æ–≥–æ–¥–∞ –¥–ª—è –∫–∞—Ç–∞–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è",
    "–±–æ—é—Å—å —Å–∫–æ—Ä–æ—Å—Ç—å –Ω–∞ –º–æ—Ç–æ—Ü–∏–∫–ª–µ",
    "–∏—â—É –ø–æ–ø—É—Ç—á–∏–∫–∞ –¥–ª—è –ø–æ–µ–∑–¥–∫–∏ –Ω–∞ —Ä–∞–±–æ—Ç—É",
    "—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –∞—Ä–µ–Ω–¥–∞ –∫–∞—Ä—Ç–∏–Ω–≥–∞",
    "–∫–∞–∫–æ–π –º–æ—Ç–æ—Ü–∏–∫–ª –ª—É—á—à–µ –≤—ã–±—Ä–∞—Ç—å –Ω–æ–≤–∏—á–∫—É",
    "–≥–¥–µ –º–æ–∂–Ω–æ –æ—Ç—Ä–µ–º–æ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ—Ç–æ—Ü–∏–∫–ª",
    "–∫–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–≤–∞ –Ω–∞ –º–æ—Ç–æ—Ü–∏–∫–ª",
    "—á—Ç–æ –Ω–∞–¥–µ—Ç—å –¥–ª—è –∫–∞—Ç–∞–Ω–∏—è –Ω–∞ –º–æ—Ç–æ—Ü–∏–∫–ª–µ",
    # –ù–æ–≤—ã–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –∏–∑ –∞–Ω–∞–ª–∏–∑–∞
    "—ç—Ç–æ –∫–æ–≥–¥–∞ —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è –Ω–∞ –º–∏–Ω–∏–º–∞–ª–∫–µ —Ö–ø –≤–æ –≤—Ä–µ–º—è —Å—Ä–∞–∂–µ–Ω–∏—è —Å –±–æ—Å–æ–º",
    "–≤–∞–Ω—è –∫–æ—Ç–æ—Ä—ã–π –∏—Å–∫–∞–ª –ø–æ–≤–æ–¥ —Å–±–µ–∂–∞—Ç—å –∏–∑ —á–∞—Ç–∞",
    "–º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –º—å—é—Ç–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —è –∑–∞–ø–∞—Ä–∏–ª—Å—è –µ–º—É –æ—Ç–¥–µ–ª—å–Ω–æ –ø–∏—Å–∞—Ç—å –∏ —É–≤–µ–¥–æ–º–ª—è—Ç—å –æ –ø—Ä–æ–∏—Å—Ö–æ–¥—è—â–µ–º",
    "–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –∞ –æ–ª–µ–≥ –≤ —á–µ—Ä–≥–µ–∫–µ –æ–¥–∏–Ω",
    "–∫–∞–∫–æ–π –∏–∑ —É –Ω–∞—Å —Ç–∞–º 4 –æ–ª–µ–≥–∞",
    "–µ–≥–æ —É –Ω–∞—Å —Ç–∞–º —á–µ—Ç—ã—Ä–µ",
]
training_labels = [
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,  # Positive
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  # Negative
]


def load_model():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–ª–∏ –æ–±—É—á–∞–µ—Ç –º–æ–¥–µ–ª—å."""
    global model
    model_path = 'ride_model.joblib'

    if os.path.exists(model_path):
        # –ï—Å–ª–∏ –º–æ–¥–µ–ª—å —É–∂–µ –±—ã–ª–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞, –∑–∞–≥—Ä—É–∂–∞–µ–º –µ–µ
        model = joblib.load(model_path)
        print("‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ —Ñ–∞–π–ª–∞.")
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç - —Å–æ–∑–¥–∞–µ–º –∏ –æ–±—É—á–∞–µ–º –Ω–æ–≤—É—é
        print("üîÑ –û–±—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏...")
        model = Pipeline([
            ('tfidf', TfidfVectorizer(
                preprocessor=prepare_text,
                ngram_range=(1, 3),  # –†–∞—Å—à–∏—Ä–∏–º –¥–æ 3-gram –¥–ª—è –ª—É—á—à–µ–≥–æÊçïÊçâ‰∏ä‰∏ãÊñá
                max_features=1500,
                min_df=2  # –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ª–æ–≤–∞, –≤—Å—Ç—Ä–µ—á–∞—é—â–∏–µ—Å—è —Ä–µ–∂–µ 2 —Ä–∞–∑
            )),
            ('clf', SGDClassifier(
                loss='log_loss',
                random_state=42,
                max_iter=2000,
                alpha=0.0001,
                penalty='l2'
            ))
        ])
        model.fit(training_texts, training_labels)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª—å –¥–ª—è –±—É–¥—É—â–∏—Ö –∑–∞–ø—É—Å–∫–æ–≤
        joblib.dump(model, model_path)
        print("‚úÖ –ú–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
        print(f"üìä –†–∞–∑–º–µ—Ä —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {len(training_texts)} –ø—Ä–∏–º–µ—Ä–æ–≤")


def analyze_message(text):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é ML-–º–æ–¥–µ–ª–∏.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (is_ride_event, confidence).
    """
    if model is None:
        load_model()

    try:
        # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
        prediction = model.predict([text])
        probas = model.predict_proba([text])

        # probas[0][1] - –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ –∫ –∫–ª–∞—Å—Å—É 1 (–Ω–∞—à–µ–º—É —Å–æ–±—ã—Ç–∏—é)
        confidence = probas[0][1]
        is_event = (prediction[0] == 1)

        print(f"üîç –ê–Ω–∞–ª–∏–∑: '{text}' -> —Å–æ–±—ã—Ç–∏–µ: {is_event}, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2%}")
        return is_event, confidence
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return False, 0.0


# –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
load_model()