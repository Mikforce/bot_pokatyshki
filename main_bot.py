import logging
import asyncio
import os
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import Application, MessageHandler, filters, ContextTypes
from message_analyzer import analyze_message

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ .env
BOT_TOKEN = os.getenv('BOT_TOKEN')
YOUR_TELEGRAM_ID = int(os.getenv('YOUR_TELEGRAM_ID'))

# –ü–∞—Ä—Å–∏–º CHAT_IDS –∏–∑ —Å—Ç—Ä–æ–∫–∏ –≤ —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª
CHAT_IDS_STR = os.getenv('CHAT_IDS', '').strip()
CHAT_IDS = []
if CHAT_IDS_STR:
    try:
        # –£–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —Å–∫–æ–±–∫–∏ –∏ –ø—Ä–æ–±–µ–ª—ã
        clean_str = CHAT_IDS_STR.replace('[', '').replace(']', '').replace(' ', '')
        if clean_str:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –ø—É—Å—Ç–∞—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
            CHAT_IDS = [int(chat_id.strip()) for chat_id in clean_str.split(',') if chat_id.strip()]
    except ValueError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ CHAT_IDS: {e}")
        CHAT_IDS = []

logger.info(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞: TG_ID={YOUR_TELEGRAM_ID}, CHAT_IDS={CHAT_IDS}")
else:
    CHAT_IDS = []
    logger.warning("CHAT_IDS –Ω–µ —É–∫–∞–∑–∞–Ω—ã –≤ .env —Ñ–∞–π–ª–µ")

# –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
if not BOT_TOKEN or BOT_TOKEN == 'your_actual_bot_token_here':
    logger.error("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
    exit(1)

if not YOUR_TELEGRAM_ID:
    logger.error("YOUR_TELEGRAM_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
    exit(1)

if not CHAT_IDS:
    logger.warning("CHAT_IDS –ø—É—Å—Ç. –ë–æ—Ç –Ω–µ –±—É–¥–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –Ω–∏–∫–∞–∫–∏–µ —á–∞—Ç—ã.")

logger.info(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞: TG_ID={YOUR_TELEGRAM_ID}, CHAT_IDS={CHAT_IDS}")


async def send_telegram_alert(context: ContextTypes.DEFAULT_TYPE, alert_text: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è Telegram."""
    try:
        await context.bot.send_message(
            chat_id=YOUR_TELEGRAM_ID,
            text=alert_text,
            parse_mode='Markdown'
        )
        logger.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")


async def check_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –∫–∞–∂–¥–æ–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑ –Ω—É–∂–Ω–æ–≥–æ –ª–∏ –Ω–∞–º —á–∞—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if update.effective_chat.id not in CHAT_IDS:
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    message_text = update.message.text
    if not message_text:
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å—Ç–∏–∫–µ—Ä—ã, —Ñ–æ—Ç–æ –∏ —Ç.–¥.

    user = update.message.from_user
    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user.first_name} –≤ —á–∞—Ç–µ {update.effective_chat.id}")

    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—à–µ–π ML-–º–æ–¥–µ–ª—å—é
    is_ride_event, confidence = analyze_message(message_text)

    # –ï—Å–ª–∏ –º–æ–¥–µ–ª—å —É–≤–µ—Ä–µ–Ω–∞, —á—Ç–æ —ç—Ç–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ–∫–∞—Ç–∞—Ç—å—Å—è - –¥–µ–π—Å—Ç–≤—É–µ–º!
    if is_ride_event and confidence > 0.7:
        alert_text = (
            f"üö® *–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ–∫–∞—Ç–∞—Ç—å—Å—è!*\n\n"
            f"*–ß–∞—Ç:* {update.effective_chat.title}\n"
            f"*–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* {user.full_name} (@{user.username})\n"
            f"*–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏:* {confidence:.2%}\n\n"
            f"*–°–æ–æ–±—â–µ–Ω–∏–µ:*\n_{message_text}_\n\n"
            f"[–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é](https://t.me/c/{str(update.effective_chat.id).replace('-100', '')}/{update.message.id})"
        )

        logger.warning(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2%})")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
        await send_telegram_alert(context, alert_text)


async def get_chat_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID —á–∞—Ç–∞."""
    chat_id = update.effective_chat.id
    chat_title = update.effective_chat.title or "–ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"

    await update.message.reply_text(
        f"üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ:\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {chat_title}\n"
        f"ID —á–∞—Ç–∞: `{chat_id}`\n"
        f"–¢–∏–ø: {update.effective_chat.type}",
        parse_mode='Markdown'
    )
    logger.info(f"–ó–∞–ø—Ä–æ—à–µ–Ω ID —á–∞—Ç–∞: {chat_id}")



def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    # –°–æ–∑–¥–∞–µ–º Application
    application = Application.builder().token(BOT_TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /chatid
    application.add_handler(CommandHandler("chatid", get_chat_id))

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–∞—Ö/—Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞—Ö
    application.add_handler(MessageHandler(
        filters.TEXT & ~filters.IS_AUTOMATIC_FORWARD & filters.ChatType.GROUPS,
        check_message
    ))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –Ω–∞—á–∞–ª –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —á–∞—Ç–æ–≤...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == '__main__':
    main()