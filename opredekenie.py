import logging
import os
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ .env
BOT_TOKEN = os.getenv('BOT_TOKEN') or 'YOUR_BOT_TOKEN_HERE'


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è ID —á–∞—Ç–æ–≤.\n\n"
        "–ü—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ –ª—é–±–æ–π —á–∞—Ç –∏ –Ω–∞–ø–∏—à–∏—Ç–µ:\n"
        "‚Ä¢ `/id` - —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å ID —ç—Ç–æ–≥–æ —á–∞—Ç–∞\n"
        "‚Ä¢ `/info` - –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ\n\n"
        "ID —á–∞—Ç–∞ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞!"
    )


async def get_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID —á–∞—Ç–∞."""
    chat = update.effective_chat
    user = update.effective_user

    response = (
        f"üìã *ID —á–∞—Ç–∞:* `{chat.id}`\n"
        f"üë§ *–í–∞—à ID:* `{user.id}`\n"
        f"üí¨ *–¢–∏–ø —á–∞—Ç–∞:* {chat.type}\n"
    )

    if chat.title:
        response += f"üè∑Ô∏è *–ù–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞:* {chat.title}\n"

    if chat.username:
        response += f"üîó *Username:* @{chat.username}\n"

    response += "\nüí° *–°–∫–æ–ø–∏—Ä—É–π—Ç–µ ID —á–∞—Ç–∞ –≤ —Ñ–∞–π–ª .env:*\n"
    response += f"`CHAT_IDS={chat.id}`"

    await update.message.reply_text(response, parse_mode='Markdown')


async def get_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ."""
    chat = update.effective_chat
    user = update.effective_user

    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    info_text = (
        f"üîç *–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*\n\n"
        f"*–ß–∞—Ç:*\n"
        f"‚Ä¢ ID: `{chat.id}`\n"
        f"‚Ä¢ –¢–∏–ø: {chat.type}\n"
    )

    if chat.title:
        info_text += f"‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: {chat.title}\n"
    if chat.username:
        info_text += f"‚Ä¢ Username: @{chat.username}\n"
    if chat.description:
        info_text += f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {chat.description}\n"

    info_text += f"\n*–í—ã:*\n‚Ä¢ ID: `{user.id}`\n‚Ä¢ –ò–º—è: {user.full_name}\n"
    if user.username:
        info_text += f"‚Ä¢ Username: @{user.username}\n"

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –≥—Ä—É–ø–ø
    if chat.type in ["group", "supergroup"]:
        info_text += f"\n*–î–ª—è .env —Ñ–∞–π–ª–∞:*\n`CHAT_IDS={chat.id}`\n\n"
        info_text += "üìù *–î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É –≤ —Ñ–∞–π–ª .env –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞*"

    await update.message.reply_text(info_text, parse_mode='Markdown')


async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫."""
    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ update {update}: {context.error}")


def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è ID —á–∞—Ç–æ–≤."""
    # –°–æ–∑–¥–∞–µ–º Application
    application = Application.builder().token(BOT_TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("id", get_id))
    application.add_handler(CommandHandler("info", get_info))
    application.add_handler(CommandHandler("chatid", get_id))  # –ê–ª–∏–∞—Å

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è ID —á–∞—Ç–æ–≤ –∑–∞–ø—É—â–µ–Ω!")
    logger.info("–î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ —á–∞—Ç –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:")
    logger.info("/id - –ø–æ–ª—É—á–∏—Ç—å ID —á–∞—Ç–∞")
    logger.info("/info - –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")

    application.run_polling()


if __name__ == '__main__':
    main()